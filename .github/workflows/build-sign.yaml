name: Build & Sign Image

on:
  push:
    branches: [ ] # 현재 워크플로우 중단 상태 ~,~
  workflow_dispatch:

jobs:
  build-sign:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write # keyless 서명용
      packages: write # GHCR push 권한

    env:
      IMAGE: ghcr.io/${{ github.repository }}:sha-${{ github.sha }}

    steps:
      - uses: actions/checkout@v4

      # IMAGE 소문자로 변환해서 env에 저장
      # 깃허브 repository명이 전부 소문자라면 생략 가능...
      - name: Set IMAGE env (lowercase)
        run: |
          IMAGE=ghcr.io/${{ github.repository }}:sha-${{ github.sha }}
          IMAGE=$(echo "$IMAGE" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      # GHCR 로그인
      - name: Log in to GHCR
        run: echo "${{ github.token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        # 개인 PAT(Personal Access Token)을 쓰고 싶으면 위 줄 대신 아래 사용:
        # run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker image
        run: docker build -t "$IMAGE" .

      - name: Push Docker image
        run: docker push "$IMAGE"

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.7.0
        with:
          cosign-release: 'v2.2.3'

      - name: Sign (keyless OIDC)
        run: cosign sign "$IMAGE" --yes # 자동으로 "yes" 처리

      - name: Verify
        run: |
          cosign verify "$IMAGE" \
            --certificate-oidc-issuer "https://token.actions.githubusercontent.com" \
            --certificate-identity-regexp "https://github.com/${{ github.repository }}/.*"
          # - cosign verify "$IMAGE" → 이미지에 서명이 있는지 확인
          # - --certificate-oidc-issuer → GitHub Actions OIDC에서 발급된 인증서인지 확인
          # - --certificate-identity-regexp → 인증서 identity가 내 repo와 일치하는지 확인
